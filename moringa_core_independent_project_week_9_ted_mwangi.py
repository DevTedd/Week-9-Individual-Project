# -*- coding: utf-8 -*-
"""Moringa Core Independent Project - Week 9 Ted Mwangi

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14fX3IuHwuKRl5NOGfmU5tEhxVuN-_DeC

# Assessment
 We will work as a Data Scientist for the Autolib electric car-sharing service company to investigate a claim about the blue cars from the provided Autolib dataset.

In an effort to do this, we need to identify some areas and periods of interest via sampling stating the reason to the choice of method, then perform hypothesis testing with regards to the claim that we will have made. An example of claim to test would be "Is the number of Bluecars taken in area X different than in area Y? Is it greater in area X than in area Z? Etc‚Äù. The selected periods of interest be either weekdays or weekends but not a mix of both. You can also consider postal codes 75015 vs 75017 to some of the areas of interest. 

To work on this project, we will perform the following analysis with Python; 

Find and deal with outliers, anomalies, and missing data within the dataset.
Plot appropriate univariate and bivariate summaries recording our observations.
Implement the solution by performing hypothesis testing.
This will need to be documented when writing the report.
"""

#Importing the libraries 
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

auto = pd.read_csv('/content/drive/MyDrive/Week 4 IP/autolib_daily_events_postal_code.csv')
auto.tail(10)

#Getting familiar with the data set
auto.info()

auto.describe()

#The dataset has no missing values and we will convert the date collum to datetime type
auto['date'] = pd.to_datetime(auto['date'])
auto['date']

#Checking for any duplicates
auto.duplicated().sum

"""Now that the data preparation is done we will begin the exploration and analysis.

Starting univariate plotting
"""

sns.countplot(x=auto['day_type'],data = auto)
plt.title("Count of rides on weekends and weekdays")

sns.countplot(x=auto['dayOfWeek'],data = auto)
plt.title("Count of entries per day of the week")
#to note weekends are the 5 and 6 values

"""Moving onto the bivariate analysis """

sns.stripplot(x=auto['day_type'], y=auto['BlueCars_taken_sum'], data = auto)
plt.title("Count of Blue cars taken per day of the week")

sns.stripplot(x=auto['day_type'], y=auto['BlueCars_returned_sum'], data = auto)
plt.title("Count of Blue cars returned per day of the week")

plt.figure(figsize=(8,5))
sns.lineplot(y=auto['BlueCars_taken_sum'],x=auto['Postal code'],data = auto, hue=auto['day_type'])
plt.title("Distribution of bluecars taken per postal location")

plt.figure(figsize=(8,5))
sns.lineplot(y=auto['BlueCars_returned_sum'],x=auto['Postal code'],data = auto)
plt.title("Distribution of bluecars returned per postal location")

sns.boxplot(y =auto['BlueCars_taken_sum'], x = auto['day_type'], data = auto)
plt.figure(figsize=(8,16))

"""After doing the analysis and visualizations of the data i noticed most of the blue vehicles are used during the weekend. Most of the vehicles picked and returened are mostly in the postal address code 75000

# Hypothesis Testing

Moving forward we will take a sample from the data set to use in making predictions for testing our hypothesis
"""

#The first step will be to combine the two collumns for returned and taken blue car to get a total number of vehicles
auto['AllCars'] = auto['BlueCars_taken_sum'] + auto['BlueCars_returned_sum']
#this is done on the assumption the same car isnt returned to its original location
auto.head(15)

#Starting the calculations
averageCars = auto['AllCars'].mean()
zscore = (200 - averageCars) / auto['AllCars'].std()
zscore

from scipy.stats import norm
prob = 1 - norm.cdf(zscore)
prob

p = (prob*100)
p

"""The p value has been calculated to 55% which is higher than the significance level. Meaning the null hypothesis should be accepted"""